{"version":3,"file":"sha1.js","sources":["../node_modules/string-encode/string-encode.js","../rawSha1.js","../sha1.js"],"sourcesContent":["/**\n * Convert different types of JavaScript String to/from Uint8Array.\n *\n * @author Dumitru Uzun (DUzun.Me)\n * @version 0.2.1\n */\n\n/*requires Uint8Array*/\n/*globals escape, unescape, encodeURI, decodeURIComponent, btoa*/\n\nexport const chr = String.fromCharCode;\n\nexport function ord(chr) {\n    return chr.charCodeAt(0);\n}\n\nexport function buffer2bin(buf) {\n    buf = view8(buf);\n    return chr.apply(String, buf);\n}\n\n/**\n * Get the hex representation of a buffer (TypedArray)\n *\n * @requires String.prototype.padStart()\n *\n * @param   {TypedArray}  buf Uint8Array is desirable, cause it is consistent regardless of the endianness\n *\n * @return  {String} The hex representation of the buf\n */\nexport function buffer2hex(buf) {\n    const bpe = buf.BYTES_PER_ELEMENT << 1;\n    return buf.reduce((r, c) => r += (c >>> 0).toString(16).padStart(bpe,'0'), '');\n}\n\nexport function buffer2str(buf, asUtf8) {\n    if(typeof buf == 'string') return buf;\n    buf = buffer2bin(buf);\n    if (asUtf8 !== false && !isASCII(buf)) {\n        if(asUtf8) {\n            buf = utf8Decode(buf);\n        } else if(asUtf8 == undefined) {\n            try {\n                buf = utf8Decode(buf);\n            } catch(err) {}\n        }\n    }\n    return buf;\n}\n\nexport function str2buffer(str, asUtf8) {\n    str = String(str);\n    if(asUtf8 == undefined) {\n        // Some guessing\n        asUtf8 = hasMultibyte(str); // || !isASCII(str)\n    }\n    if (asUtf8) {\n        str = utf8Encode(str);\n    }\n\n    // Smaller x2\n    // return new Uint8Array(String(str).split('').map(ord));\n\n    // Faster x3-4\n    let len = str.length;\n    const buf = new Uint8Array(len);\n    while(len--) buf[len] = str.charCodeAt(len);\n    return buf;\n}\n\nconst nonHexDigitRE = /[^0-9a-f]/g;\n\n/**\n * Read a hex string into a buffer (Uint8Array), ignoring non-hex chars.\n *\n * @param   {String}  str\n *\n * @return  {Uint8Array}\n */\nexport function hex2buffer(str) {\n    str = str.replace(nonHexDigitRE, '');\n    const len = str.length;\n    const ret = new Uint8Array((len + 1) >>> 1);\n\n    for(let i=0; i<len; i+=2) {\n        ret[i >>> 1] = parseInt(str.slice(i, i+2), 16);\n    }\n\n    return ret;\n}\n\n/**\n * This method is a replacement of Buffer.toString(enc)\n * for Browser, where Buffer is not available.\n *\n * @requires btoa\n *\n * @this {Uint8Array}\n *\n * @param   {String}  enc  'binary' | 'hex' | 'base64' | 'utf8' | undefined\n *\n * @return  {String}\n */\nexport function toString(enc) {\n    // The Node.js equivalent would be something like:\n    // if(typeof Buffer == 'function') {\n    //     if(enc === false) enc = 'binary';\n    //     if(enc === true) enc = 'utf8';\n    //     return Buffer.from(this.buffer, this.byteOffset, this.byteLength).toString(enc);\n    // }\n    switch(enc) {\n        case false:\n        case 'binary': return buffer2bin(this);\n        case 'hex': return buffer2hex(this);\n        case 'base64': return btoa(buffer2bin(this));\n        case 'utf8': enc = true; break;\n    }\n    return buffer2str(this, enc);\n}\n\nexport function view8(buf, start, len) {\n    // If buf is a Buffer, we still want to make it an Uint8Array\n    if(!start && !len && buf instanceof Uint8Array && !buf.copy) return buf;\n    start = start >>> 0;\n    if(len == undefined) len = buf.byteLength - start;\n    return new Uint8Array(buf.buffer, buf.byteOffset+start, len);\n}\n\nlet _isLittleEndian;\nexport function isLittleEndian() {\n    if(_isLittleEndian !== undefined) return _isLittleEndian;\n    _isLittleEndian = !!(new Uint8Array(new Uint16Array([1]).buffer)[0]);\n    isLittleEndian = () => _isLittleEndian;\n    return _isLittleEndian;\n}\n\nexport function switchEndianness32(i) {\n    return (i&0xFF)<<24\n        | (i&0xFF00)<<8\n        | i>>8&0xFF00\n        | i>>24&0xFF\n    ;\n}\n\nexport function guessEncoding(str) {\n    if(hasMultibyte(str)) return 'mb';\n\n    // @todo: test which is faster, utf8bytes() or RegExp\n    if(isHEX(str)) return 'hex';\n    // if(isASCII(str)) return 'ascii';\n    // if(isUTF8(str)) return 'utf8';\n\n    let mbLen = utf8bytes(str);\n    if(mbLen) return 'utf8';\n    if(mbLen === 0) return 'ascii';\n    if(mbLen === false) {\n        mbLen = utf8bytes(str, true);\n        if(mbLen) return '~utf8'; // UTF8, but with async characters at the edges\n    }\n    return 'binary';\n}\n\nconst hasMultibyteRE = /([^\\x00-\\xFF])/;\nconst isHEXRE = /^[0-9a-f\\s]*$/i;\nconst isASCIIRE = /^[\\x00-\\x7F]*$/;\nconst isUTF8RE = /^(?:[\\x00-\\x7F]|[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF][\\x80-\\xBF]|[\\xF0-\\xF7][\\x80-\\xBF][\\x80-\\xBF][\\x80-\\xBF])*$/;\n\nexport function hasMultibyte(str) {\n    let m = hasMultibyteRE.exec(str);\n    return m ? m[1] : false;\n}\n\nexport function isBinary(str) {\n    return !hasMultibyte(str);\n}\n\nexport function isASCII(str) {\n    return isASCIIRE.test(str);\n}\n\nexport function isUTF8(str) {\n    return isUTF8RE.test(str);\n}\n\nexport function isHEX(str) {\n    return isHEXRE.test(str);\n}\n\nexport function utf8bytes(str, allowAsyncChars) {\n    var l = str.length\n    ,   i = 0\n    ,   u = 0\n    ,   c\n    ,   a = -1\n    ,   asy = +!!allowAsyncChars\n    ;\n\n    for( ; i < l ; ) {\n        c = str.charCodeAt(i++);\n        if( c < 0x80 ) continue; // ASCII\n        if( 0xFF <= c ) return false; // has multi-byte\n\n        // async UTF8 character\n        if( (c & 0xC0) == 0x80 ) {\n            // Ignore async UTF8 characters at the beginning\n            if(asy == i) {\n                ++u;\n                ++asy;\n                continue;\n            }\n            return false;\n        }\n\n        // Check sync UTF8 bytes\n        a   = (c & 0xE0) !== 0xC0\n            ? (c & 0xF0) !== 0xE0\n            ? (c & 0xF8) !== 0xF0\n            ? false\n            : 3\n            : 2\n            : 1\n        ;\n        if(!a) return false; // Not an ASCII, nor sync UTF8 bytes\n\n        for( ; (u += 1) && a-- && i < l; ) {\n            c = str.charCodeAt(i++);\n            if((c & 0xC0) !== 0x80) {\n                return false; // Not an ASCII, nor sync UTF8 bytes\n            }\n        }\n    }\n\n    // Ignore async UTF8 characters at the end\n    if(~a && !allowAsyncChars) return false;\n\n    return u;\n}\n\nexport function utf8Encode(str) {\n    return unescape(encodeURI(str));\n}\n\nexport function utf8Decode(str) {\n    return decodeURIComponent(escape(str));\n}\n","import {\n    isLittleEndian, switchEndianness32,\n} from 'string-encode';\n\n/**\n * SHA1 on binary array\n *\n * @param   {Uint8Array}  b  Data to hash\n *\n * @return  {Uint8Array}  sha1 hash\n */\nexport default function rawSha1(b) {\n    let i = b.byteLength\n    ,   bs = 0\n    ,   A, B, C, D, G\n    ,   H = Uint32Array.from([A = 0x67452301, B = 0xEFCDAB89, ~A, ~B, 0xC3D2E1F0])\n    ,   W = new Uint32Array(80)\n    ,   nrWords = (i / 4 + 2) | 15\n    ,   words = new Uint32Array(nrWords+1)\n    ,   j\n    ;\n    words[nrWords] = i * 8;\n    words[i >> 2] |= 0x80 << (~i << 3);\n    for (;i--;) {\n        words[i >> 2] |= b[i] << (~i << 3);\n    }\n\n    for (A = H.slice(); bs < nrWords; bs += 16, A.set(H)) {\n        for (i = 0; i < 80;\n            A[0] = (\n                G = ((b = A[0]) << 5 | b >>> 27)\n                    + A[4]\n                    + (W[i] = (i<16) ? words[bs + i] : G << 1 | G >>> 31)\n                    + 0x5A827999,\n                B = A[1],\n                C = A[2],\n                D = A[3],\n                G + ((j = i / 5 >> 2)\n                    ? j != 2\n                        ? (B ^ C ^ D) + ( j & 2 ? 0x6FE0483D : 0x14577208 )\n                        : (B & C | B & D | C & D) + 0x34994343\n                    : B & C | ~B & D\n                )\n            )\n            , A[1] = b\n            , A[2] = B << 30 | B >>> 2\n            , A[3] = C\n            , A[4] = D\n            , ++i\n        ) {\n            G = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n        }\n\n        for(i = 5; i; ) H[--i] = H[i] + A[i];\n    }\n\n    if(isLittleEndian()) {\n        H = H.map(switchEndianness32);\n    }\n\n    return new Uint8Array(H.buffer, H.byteOffset, H.byteLength);\n}\n","import rawSha1 from './rawSha1';\nimport {\n    str2buffer,\n    toString,\n} from 'string-encode';\n\nexport default function sha1(str, asUtf8) {\n    let buf = str && str.BYTES_PER_ELEMENT ? str : str2buffer(str, asUtf8);\n    buf = rawSha1(buf);\n    buf.toString = toString;\n    return buf;\n}\n"],"names":["chr","String","fromCharCode","buffer2bin","buf","view8","apply","buffer2hex","bpe","BYTES_PER_ELEMENT","reduce","r","c","toString","padStart","buffer2str","asUtf8","isASCII","utf8Decode","undefined","err","str2buffer","str","hasMultibyte","utf8Encode","len","length","Uint8Array","charCodeAt","enc","btoa","start","copy","byteLength","buffer","byteOffset","_isLittleEndian","isLittleEndian","Uint16Array","switchEndianness32","i","hasMultibyteRE","isASCIIRE","m","exec","test","unescape","encodeURI","decodeURIComponent","escape","rawSha1","b","bs","A","B","C","D","G","H","Uint32Array","from","W","nrWords","words","j","slice","set","map","sha1"],"mappings":"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"}